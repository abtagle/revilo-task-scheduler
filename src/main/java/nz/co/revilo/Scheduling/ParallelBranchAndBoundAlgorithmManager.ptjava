package nz.co.revilo.Scheduling;

import java.util.ArrayList;
import java.util.List;

import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * Finds optimal schedule using a parallel DFS Branch and Bound
 * 
 * @author Aimee T
 *
 */
public class ParallelBranchAndBoundAlgorithmManager extends BranchAndBoundAlgorithmManager {

	private TaskIDGroup _schedulesToComplete;
	private int _initialRecursionDepth;

	public ParallelBranchAndBoundAlgorithmManager(int processingCores) {
		super(processingCores);
		rootSchedules = new CopyOnWriteArrayList<Schedule>();
	}

	@Override
	protected final void setUpExecute() {
		_initialRecursionDepth = numNodes / 2;
	}

	/**
	 * Method to call each of the initial and worker bnb methods
	 * 
	 * @param s
	 * 
	 * @author Aimee T
	 */
	@Override
	protected void bnb(Schedule s) {
		initialBnb(s, 0);
	}

	private void initialBnb(Schedule s, int depth) {
		if(isBounded(s)){
			return; //break tree at this point
		}

		if(depth ==_initialRecursionDepth) {
			completeSchedule(s);
			return;
		}

		//continue DFS
		List<Schedule> nextSchedules = new ArrayList<Schedule>();
		for(int n:s.independentSet){
			for(int p=0; p<_processingCores; p++){
				nextSchedules.add(new Schedule(this, s, n, p));
			}
		}
		depth++;
		for(Schedule nextSchedule:nextSchedules){
			initialBnb(nextSchedule, depth);
		}
	}

	/**
	 * Creates the ParaTask tasks which complete partial schedules generated by initialBnb
	 * 
	 */
	private void completeSchedule(Schedule s) {
		TaskID<Void> partial = completeScheduleTask(s);
	}

	/**
	 * ParaTask task which completes the partial schedules generated by initialBnb
	 * 
	 */
	TASK private void completeScheduleTask(Schedule s) {
		WorkerBnb worker = new WorkerBnb(s, upperBound, _processingCores, sources,
				bottomUpSinks, rootSchedules, bottomLevels, numNodes, totalNodeWeights,
				nodeStartTimes, nodeProcessors, _nodeWeights, _arcs, _arcWeights);
		worker.execute();
		if(upperBound > worker.getOptimalLength()) {
			upperBound = worker.getOptimalLength();
			optimalSchedule = worker.getOptimal();
		}
	}

	private class WorkerBnb extends BranchAndBoundAlgorithmManager{
		private Schedule _schedule;
		private Schedule _optimalSchedule;

		public WorkerBnb(Schedule schedule, int upperBound, int processingCores, 
				List<Integer> sources, List<Integer> bottomUpSinks, List<Schedule> rootSchedules,
				int[] bottomLevels, int numNodes, int totalNodeWeights, 
				List<Integer> nodeStartTimes, List<Integer> nodeProcessors, int[] nodeWeights,
				boolean[][] arcs, int[][] arcWeights) {
			super(processingCores);
			_schedule = schedule;
			this.upperBound = upperBound;
			this.sources = sources;
			this.bottomUpSinks = bottomUpSinks;
			this.rootSchedules = rootSchedules;
			this.bottomLevels = bottomLevels;
			this.numNodes = numNodes;
			this.totalNodeWeights = totalNodeWeights;
			this.nodeStartTimes = nodeStartTimes;
			this.nodeProcessors = nodeProcessors;

			_nodeWeights = nodeWeights;
			_arcs = arcs;
			_arcWeights = arcWeights;
		}

		public void execute() {
			workerBnb(_schedule);
		}

		private void workerBnb(Schedule s) {
			if(s.lowerBound>=upperBound){
				return; //break tree at this point
			}

			//found optimal for the root started with
			//reached end of a valid schedule. Never broke off, so is optimal
			if(s.openSet.isEmpty()){			
				//TODO: doing this to make sure only optimal schedules get through
				if(s.getMaxFinishTime()<=upperBound) {
					_optimalSchedule = s;
					upperBound=s.getMaxFinishTime();
					upperBound = s.getMaxFinishTime();
					return;
				}
			}

			//continue DFS
			List<Schedule> nextSchedules = new ArrayList<Schedule>();
			for(int n:s.independentSet){
				for(int p=0; p<_processingCores; p++){
					nextSchedules.add(new Schedule(this, s, n, p));
				}
			}
			
			for(Schedule nextSchedule:nextSchedules){
				workerBnb(nextSchedule);
			}
		}
		
		/**
		 * Returns the optimal schedule found by this worker.
		 */
		public Schedule getOptimal() {
			return _optimalSchedule;
		}
		
		/**
		 * Returns the optimal schedule's length
		 */
		public int getOptimalLength() {
			return upperBound;
		}
	}
}
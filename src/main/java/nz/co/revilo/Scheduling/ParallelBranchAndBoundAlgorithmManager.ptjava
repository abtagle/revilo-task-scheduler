package nz.co.revilo.Scheduling;

import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * Algorithm manager for the parallelised implementation of branch and bound, which makes use
 * pf ParallelTask
 * 
 * @author Aimee T
 */
public class ParallelBranchAndBoundAlgorithmManager extends BranchAndBoundAlgorithmManager {
	/**
	 * Constructor which sets the number of processing cores we are scheduling for
	 *
	 * @author Aimee T
	 */
	public ParallelBranchAndBoundAlgorithmManager(int processingCores, int threads) {
		super(processingCores);
	}

	/**
	 * Starts the branch and bound algorithm on a thread, and then waits for the
	 * tasks occurring in parallel to finish
	 *
	 * @author Aimee T.
	 */
	@Override
	protected void startBnb() {
		TaskIDGroup tasks = this.removeAndExecute(new ConcurrentLinkedQueue<BnBSchedule>(rootSchedules));
		try {
			tasks.waitTillFinished();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Multi task dequeueing of the root schedules
	 * Makes a new threads
	 */
	TASK(*) public void removeAndExecute(ConcurrentLinkedQueue<BnBSchedule> rootSchedules) {
		BnBSchedule b = null;
		while ((b = rootSchedules.poll()) != null) {
			bnb(b);
		}
	}
}